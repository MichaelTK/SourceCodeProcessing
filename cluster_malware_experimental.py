#!/usr/bin/python3

print(__doc__)

VECTOR_FILE_PATH = "/home/k1462425/Documents/Research/MalwareSourceTestSet/SCAAarffs/compiled_76authors"
VECTOR_FILE_PATH2 = "/home/k1462425/Documents/Research/MalwareSourceTestSet/SCAAarffs/syntactical_features_vector"
lines = []

#import plotly.plotly as py
#import plotly.graph_objs as go

import matplotlib.pyplot as plt
import numpy as np
import math

import sklearn
from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.datasets.samples_generator import make_blobs
from sklearn.preprocessing import StandardScaler

def load_vectors():
    print("In load_vectors()")
    global lines
    malwarenames = []
    filenames = []
    with open(VECTOR_FILE_PATH) as fp:
        line = fp.readline()
        cnt = 1
        #while line:
        while line:
            print(cnt)
            splitline = line.strip().split(',')
            filename=splitline.pop(0)
            #print("Name of cpp file: "+filename)
            filenames.append(filename)
            splitline.pop(-1)
            malwarename=splitline.pop(-1)
            #print("Name of corresponding malware family: "+malwarename+"\n")
            malwarenames.append(malwarename)
            #print(malwarenames[0])
            #splitline.pop(-27) #comment this out if dealing only with syntactical features
            try:
                for idx,value in enumerate(splitline):
                    if value == '-Infinity':
                        #print("INFINITY")
                        splitline[idx] = '0'
                    elif value == 'TRUE':
                        #print("TRUE")
                        splitline[idx] = '1'
                    elif value == 'FALSE':
                        #print("FALSE")
                        splitline[idx] = '0'
                    elif len(value) > 2:
                        if  (value[1] == '.' or value[2] == '.') and len(value) > 4:
                            #print(value)
                            splitline[idx] = truncate(value, 3)
                    if value == 'NaN':
                        print('NaN')
                        splitline[idx] = '0'
#                    elif value[0] == '-':
#                        splitline[idx] = 0
            except:
                print("An exception occurred. Probably string index out of bounds")
            lines.append(splitline)
            line = fp.readline()
            cnt += 1
    return [malwarenames,filenames]

def truncate(f, n):
    '''Truncates/pads a float f to n decimal places without rounding'''
    s = '{}'.format(f)
    if 'e' in s or 'E' in s:
        return '{0:.{1}f}'.format(f, n)
    i, p, d = s.partition('.')
    return '.'.join([i, (d+'0'*n)[:n]])

def integerise():
    print("In integerise()")
    global lines
    debugc = 0
    for line in lines:
        print(debugc)
        debugc += 1
        for idx, value in enumerate(line):
            #print(idx)
            #print(idx, value)
            #print(type(value))
            value = float(value)
            #value = value * 1000000
            #value = math.floor(value)
            #value = value/1000000
            #value = int(value)
            line[idx] = value

    print("There are "+str(len(lines))+" samples")


def findNaN(lines):
    found = False
    for line in lines:
        for elem in line:
            if str(elem) == 'NaN':
                found = True
    return found

def printTypes(lines):
    for line in lines:
        for elem in line:
            if str(type(elem)) != "<class 'float'>":
                print("Not float! Type is: "+str(type(elem)))

def cluster(malwarenames,filenames):
    print("In cluster()")
    #print(lines)
    #centers = lines/2
    centers = lines[:len(lines)//5]
    print("The first element of the first vector is: "+str(lines[0][0]))
    print(len(lines[0]))

    print("Is there a NaN: "+str(findNaN(lines)))
    printTypes(lines)
    X, labels_true = make_blobs(n_samples=1012, centers=centers, cluster_std=0.4,
                                random_state=0)

    X = StandardScaler().fit_transform(X)
    db = DBSCAN(eps=250, min_samples=2).fit(X)
    core_samples_mask = np.zeros_like(db.labels_, dtype=bool)
    core_samples_mask[db.core_sample_indices_] = True
    labels = db.labels_
    print("The first element of the first vector is: "+str(X[0][0]))
    #print (lines)
    # Number of clusters in labels, ignoring noise if present.
    n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)

    print('Estimated number of clusters: %d' % n_clusters_)
    print("Homogeneity: %0.3f" % metrics.homogeneity_score(labels_true, labels))
    print("Completeness: %0.3f" % metrics.completeness_score(labels_true, labels))
    print("V-measure: %0.3f" % metrics.v_measure_score(labels_true, labels))
    print("Adjusted Rand Index: %0.3f"
          % metrics.adjusted_rand_score(labels_true, labels))
    print("Adjusted Mutual Information: %0.3f"
          % metrics.adjusted_mutual_info_score(labels_true, labels))
    print("Silhouette Coefficient: %0.3f"
          % metrics.silhouette_score(X, labels))


    unique_labels = set(labels)
    colors = [plt.cm.Spectral(each)
          for each in np.linspace(0, 1, len(unique_labels))]
    for k, col in zip(unique_labels, colors):

        if k == -1:
            # Black used for noise.
            #print("Setting to black")
            col = [0, 0, 0, 1]
        #print(col)
        class_member_mask = (labels == k)

        #if k != -1:
        xy = X[class_member_mask & core_samples_mask]
        plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),
            markeredgecolor='k', markersize=14)

        xy = X[class_member_mask & ~core_samples_mask]
        plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),
            markeredgecolor='k', markersize=6)


        #plt.annotate('hello',(xy[:, 0],xy[:, 1]))
        #print(len(X[4]))
        #plt.annotate('hello',(k,col))

    xy = X
    count = 0
    for xcoord in xy[:,0]:
        ycoord = xy[count, 1]
        plt.annotate(malwarenames[count]+": "+filenames[count], (xcoord, ycoord))
        count += 1

    plt.title('Estimated number of clusters: %d' % n_clusters_)
    plt.show()


if __name__ == '__main__':
    malwarenamesandfilenames = load_vectors()
    print("After load_vectors()")
    malwarenames = malwarenamesandfilenames[0]
    filenames = malwarenamesandfilenames[1]
    integerise()
    print("After integerise()")
    cluster(malwarenames,filenames)
    print("After cluster")
